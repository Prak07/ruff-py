# Pre-commit configuration for Ruff integration
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

repos:
  # Ruff linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      # Run the linter
      - id: ruff
        name: ruff-linter
        description: Run Ruff linter
        args: [--fix]
        types_or: [python, pyi, jupyter]
        
      # Run the formatter
      - id: ruff-format
        name: ruff-formatter
        description: Run Ruff formatter
        types_or: [python, pyi, jupyter]

  # Additional useful hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Basic file checks
      - id: trailing-whitespace
        name: trim-whitespace
        description: Trim trailing whitespace
        
      - id: end-of-file-fixer
        name: fix-eof
        description: Ensure files end with a newline
        
      - id: check-merge-conflict
        name: check-merge-conflict
        description: Check for merge conflict markers
        
      - id: check-case-conflict
        name: check-case-conflict
        description: Check for case conflicts
        
      - id: check-toml
        name: check-toml
        description: Validate TOML files
        
      - id: check-yaml
        name: check-yaml
        description: Validate YAML files
        args: ['--unsafe']
        
      - id: check-json
        name: check-json
        description: Validate JSON files
        
      - id: check-added-large-files
        name: check-large-files
        description: Check for large files
        args: ['--maxkb=1000']
        
      - id: check-ast
        name: check-python-ast
        description: Check Python AST
        
      - id: debug-statements
        name: check-debug-statements
        description: Check for debugger imports and breakpoints
        
      - id: name-tests-test
        name: check-test-naming
        description: Ensure tests are named correctly
        args: ['--pytest-test-first']

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: '1.7.5'
    hooks:
      - id: bandit
        name: bandit-security-check
        description: Run security checks with bandit
        args: ['-r', '.', '--skip', 'B101,B601']
        exclude: ^tests/

  # Type checking (optional - requires mypy installation)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: mypy-type-check
        description: Run mypy type checker
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --no-strict-optional]

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: pydocstyle-docstring-check
        description: Check docstring style
        args: [--convention=google]
        exclude: ^(tests/|migrations/)

  # Dependency security
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: safety-check
        description: Check for known security vulnerabilities

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false